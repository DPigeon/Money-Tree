name: CI Pipeline

# CI will be triggered only when making a PR to the dev branch
# on:
#   pull_request:
#     branches:
#       - "*"
#       - dev

# TEMPORARY for testing
on:
  push:
    branches:
      - "*"
      - issue/#70-setup-devops-pipeline

# We have 2 main jobs:
#   1. Integration: (Install) --> Lint --> Tests --> Package
#   2. Quality Check
jobs:
  job_1:
    name: Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Cache Node Modules
        id: node-modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          # Used to create a place to store node_modules to reuse it in other steps
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      - name: Install Frontend Dependencies
        if: steps.node-modules.outputs.cache-hit != 'true' # Checks if node has modules as cache already
        run: cd client && npm install

      - name: Frontend Lint
        run: ng lint

      - name: Frontend Tests
        run: npm test

      - name: Setup Java
        uses: actions/setup-java@v1.3.0
        with:
          java-version: 11.0.8

      - name: Cache Maven
        id: maven-dependencies
        uses: actions/cache@v2
        # maven cache files are stored in `~/.m2/repository` on Linux/macOS
        # Used to create place to store libraries to resure it in other steps
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install Backend Dependencies
        if: steps.maven-dependencies.outputs.cache-hit != 'true' # Checks if maven has dependencies as cache already
        run: cd ../backend && ./mvnw install

      - name: Backend Tests
        run: ./mvnw clean test

      # TODO: Package sub-job
      # This sub-job will be use docker to package our application by building it and creating an image of it
      # Used to know if the app can be built properly before shipping it in deployment
      # Use the cache (dependencies) of both client & backend defined above

  # TODO: Quality Check & Security Job (use Codacy.com https://github.com/marketplace/codacy/plan/MDIyOk1hcmtldHBsYWNlTGlzdGluZ1BsYW4xNA==#pricing-and-setup)
  # SonarCloud limits us with the organization requirement that they have unfortunately

  # job_2:
  #   needs: job_2
  #   name: SonarCloud
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
